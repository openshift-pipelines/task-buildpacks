---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildpacks
  labels:
    app.kubernetes.io/version: {{ .Chart.Version }}
{{- if .Values.annotations }}
  annotations:
  {{- .Values.annotations | toYaml | nindent 4 }}
{{- end }}
spec:
  description: {{ .Chart.Description }}

  workspaces:
    - name: source
      description: |
        Application source-code.
    - name: cache
      optional: true
      description: |
        Cache directory, alternative to the `CACHE_IMAGE` param.
    - name: bindings
      optional: true
      description: |
        Extra bindings, CA certificate bundle files.

  params:
    - name: APP_IMAGE
      type: string
      description: |
        Application's container image name, and tag.
    - name: BUILDER_IMAGE
      type: string
      default: "{{ .Values.images.builder }}"
      description: |
        Cloud Native Builder (CNB) container image name (and tag).
    - name: CNB_PLATFORM_API
      type: string
      default: "{{ .Values.cnb.platformAPI }}"
      description: |
        Lifecycle platform API compatibility version.
    - name: SUBDIRECTORY
      type: string
      default: ""
      description: |
        Alternative `CNB_APP_DIR` directory, relative to the "source"
        Workspace.
    - name: ENV_VARS
      type: array
      default: []
      description: |
        Environment variables to set during "build-time".
    - name: PROCESS_TYPE
      type: string
      default: "web"
      description: |
        Application process type.
    - name: BINDINGS_GLOB
      type: string
      default: "*.pem"
      description: |
        Extra binding file name(s) (glob expression) present on the `bindings`
        Workspace to be copied into `SERVICE_BINDING_ROOT` directory.
    - name: RUN_IMAGE
      type: string
      default: ""
      description: |
        Reference to a run image to use.
    - name: CACHE_IMAGE
      type: string
      default: ""
      description: |
        The name of the persistent cache image (when  cache workspace is not
        provided).
    - name: SKIP_RESTORE
      type: string
      default: "false"
      description: |
        Do not write layer metadata or restore cached layers.
    - name: USER_ID
      type: string
      default: "{{ .Values.cnb.securityContext.runAsUser }}"
      description: |
        CNB container image user-id (UID).
    - name: GROUP_ID
      type: string
      default: {{ .Values.cnb.securityContext.runAsGroup }}
      description: |
        CNB container image group-id (GID).
    - name: VERBOSE
      type: string
      default: "false"
      description:
        Turns on verbose logging, all commands executed will be printed out.

  results:
    - name: APP_IMAGE_DIGEST
      description: |
        Reported `APP_IMAGE` digest.
    - name: APP_IMAGE_URL
      description: |
        Reported fully qualified container image name.

  volumes:
    - name: scripts-dir
      emptyDir: {}
    - name: platform-dir
      emptyDir: {}
    - name: layers-dir
      emptyDir: {}
    - name: bindings-dir
      emptyDir: {}

  stepTemplate:
    env:
{{- include "environment" . | nindent 6 }}
{{- if .Values.stepTemplate.resources }}
    resources:
  {{- .Values.stepTemplate.resources | toYaml | nindent 6 }}
{{- end }}

  steps:
    # load all the shell scripts into the "/script" directory, a simple file creation followed by
    # adding execution permission
    - name: load-scripts
      image: {{ .Values.images.bash }}
      workingDir: /scripts
      script: |
        set -e
{{- range $path, $content := .Files.Glob  "scripts/*.sh" }}
  {{- $name := trimPrefix "scripts/" $path }}
        printf '%s' "{{ $content | toString | b64enc }}" |base64 -d >{{ $name }}
        chmod +x "{{ $name }}"
{{- end }}
      volumeMounts:
        - name: scripts-dir
          mountPath: /scripts

    # prepare the filesytem and extra settings in order to perform the CNB builder as the next step,
    # extra enviroment variables are stored on the "/platform/env", and extra binding files on the
    # service-binding root directory, following buildpacks convention
    - name: prepare
      image: {{ .Values.images.bash }}
      command:
        - /scripts/prepare.sh
      args:
        - "$(params.ENV_VARS[*])"
      volumeMounts:
        - name: scripts-dir
          mountPath: /scripts
        - name: layers-dir
          mountPath: /layers
        - name: platform-dir
          mountPath: /platform
        - name: bindings-dir
          mountPath: /bindings
      securityContext:
        runAsNonRoot: false

    # runs the primary entrypoint for the task, invokes the "creator" CNB entrypoint to perform the
    # whole lifecycle steps in order to build a new container image
    - name: creator
      image: $(params.BUILDER_IMAGE)
      command:
        - /scripts/creator.sh
      volumeMounts:
        - name: scripts-dir
          mountPath: /scripts
        - name: layers-dir
          mountPath: /layers
        - name: platform-dir
          mountPath: /platform
        - name: bindings-dir
          mountPath: /bindings
      securityContext:
        runAsNonRoot: true

    # inspect and extract the lifecycle results stored on /layers/report.toml, looking for the digest
    # and fully qualified image name
    - name: report
      image: {{ .Values.images.bash }}
      command:
        - /scripts/report.sh
      volumeMounts:
        - name: scripts-dir
          mountPath: /scripts
        - name: layers-dir
          mountPath: /layers
